
 * gabien-app-r48 - Editing program for various formats
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.

"MiniVM" is not to be confused with any other "MiniVM".
If you feel there is a danger of confusion, feel free to refer to it as SortOfLispLikeButNotReallyInternalR48VM.

"Datum" is not to be confused with any other "Datum".
If you feel there is a danger of confusion, feel free to refer to it as R48TerribleS-ExpressionObjectNotation.

MiniVM & Datum: What, why, and how
 26th February, 2023

Datum is an S-expression language being positioned as the future replacement for DBLoader.
Datum's main use, at least at first, is going to be trying to break down the parts of R48 that are just awful.

MiniVM is a system for efficient scripting within R48.

It's meant to:
+ improve PathSyntax performance
+ be applicable to future cases where it's preferrable to move code out of the R48 Java body

The assumption is that it will be used with the Datum project in future to create a Lisp-styled language.
This is going to start with the PathSyntax takeover.

MiniVM execution is based on a tree of expressions.
Expressions are executed with a context and a set of 8 "local variables" as arguments.
The purpose of implementing local variables as individual arguments rather than an array is for GC performance reasons.
These local variables, as such, operate in a Lisp "let"-style fashion. Changes never propagate outwards.
The upside is that trees may be safely nested to implement function calls without an explicit call mechanism.

Functions in MiniVM have "fast-call" capability up to 4 args. See MVMFn.

MiniVM Datum Language:
This extends MiniVM into a usable general-purpose script language.
Here's the basics of how it operates:
1. All expressions go through a phase of compilation into MiniVM code. This occurs as early as possible, always.
2. Environments map symbols to slots (slots being mutable variable holders).
3. Execution of a file occurs as one separate compile/run cycle per outer-level value.
   This helps with error tracking.
4. Compilation of top-level definitions creates them.
   This is an attempt to match R4RS page 12 and figure out what to do about the environment/scope differentiation.
5. Macro availability is defined by what's in the current env. when the macro is compiled.
6. Three kinds of variables: Fast locals, scoped locals, and environment variables
   + Fast locals are done using the 8 MiniVM registers
   + Scoped locals are carefully pre-compiled to still be performant, but do GC alloc
   + Environment variables are implemented via magic

   Fast locals and scoped locals are both represented by MVMCLocal.
   This is mutable so that it can be deoptimized later in compilation.
   This allows creating many locals as fast locals and deoptimizing them if they are accessed in an incompatible way.
