
 * gabien-app-r48 - Editing program for various formats
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

The help file, though it could easily serve as a Twine-like engine if you so chose.

0: Index
i HelpImg/0.demo.png
.
. Firstly, keep in mind that text fields will revert unless you press enter.
. The same goes for number fields.
. This is critical to several operations.
.
. Secondly, make sure you ran this program from the same directory as the game that you want to edit.
. Alternatively, make sure that the game path has been set correctly.
.
. Third, make sure that you've selected that game's engine at the first menu.
. If not, closing both this help window and the main window should bring you back there.
.
. Before you continue, if you are just starting out and trying to make something to run on EasyRPG with this, read the following.
> 21 R2k Backend Quickstart
. While if you just want to use this to increase your gold in a 2k/2k3 game (you know who you are)...
> 23 R2k Savefiles Quickstart
.
. Moving this help window out of the way, the picture on the right should match.
. The tab names should describe what they do, but in any case, for further detail, see the below pages:
> 1 Map
> 2 MapInfos
> 3 Tools
> 4 Database Objects
> 6 System Tools
. Note that to ensure your work is saved, remember to press the button at the top-right to save your work.
. Furthermore, keep backups. :)
> 999 License

1: Map
i HelpImg/1.diagram.png
. 'Map' is the map editor.
. This is how you modify maps, which are 2D tile-based grids on which objects sit.
. What the kind of objects are, how big the tiles are, and such, is specific to the engine.
.
. Dragging with the Right Mouse Button allows panning about the map.
. This is crucial for even basic datamining operations.
. Clicking with the Left Mouse Button will use the current tool, unless no tool is running, in which case it also pans.
.
> 7 At the top, a bar is shown. These are the map tools.
.
. Pressing the "m" button will toggle a minimap.
. This allows faster navigation of the map, or reading messages written with tiles.
. At the top left, there are zoom controls, and information on what mouse controls are currently available.
> 0 Back to the Index.

2: MapInfos
i HelpImg/2.hierarchy.png
. This is the grand list of maps for editing.
. Keep in mind that some "maps" may not actually be maps,
. but may be dummy entries for organization.
. These maps are structured in a hierarchy.
. To select a map, click on it's name.
. This will attempt to open the map (which may not succeed, leaving you with a blank map and a created object, for now)
. When a map is selected, buttons will appear at the right.
. (One for editing information, and one for moving the map up a level in the hierarchy.)
. To parent a map under another map, simply drag and drop it.
. Maps can be created and deleted with this tool.
. Be careful.
> 0 Back to the Index.

3: Tools
. Like System Tools later, this contains debugging functions.
. They should not need to be used under normal circumstances,
. and have the potential to cause havoc.
. However, these functions are less... generic, than the ones in System Tools.
> 0 Back to the Index.

4: Database Objects
. If there is a tab to edit an object, it is safer to edit it using that tab.
. But failing that:
. This allows editing the various bits and pieces that nobody would ever write a dedicated editor for, so the generic layout system was used.
. (At least you can edit it, right?)
. A description of each object would take forever to write.
. This, however, gives some general details.
> 12 Object Editing Details
> 0 Back to the Index.

 5 no longer exists

6: System Tools
. This contains various functions for debugging, testing, and sanity maintenance.
. They're here because I may need them, more than anything else.
> 0 Back to the Index.

7: Map Tools
. This would not be very much of an editor if maps were not editable.
. The "Map Tools" dialogue box exists to help you achieve this.
i HelpImg/7.example.png
. As you can see, several tools exist.
. For general usage, "Tiles", and "Event List", should be enough.
. For access to the BGS/BGM, map resize, and other map pieces, use Edit Direct.
> 8 Tiles
> 9 Event List
> 10 How To Resize A Map
> 1 Back to the Map.

8: Tiles
i HelpImg/need-image.png
. This allows the editing of the map's tiles.
. The "stride" of the tileset depends on the window's width.
. Clicking on a tile in the map will paste it in.
. An area of the tileset can be selected, and it will be interpreted based on the window's width, when the tiles are pasted in.
> 7 Back to the Map Tools.

9: Event List
. This is a rather simple tool to use.
. Opening it will show circles at the positions of events.
. Clicking a tile will report all events at that position, and give the option to create a new event there, delete one of the existing events, or move an event.
> 11 Event Editing Details
i HelpImg/9.usage.png
> 7 Back to the Map Tools.

10: How To Resize A Map
. Note before continuing:
. In older versions of R48, all tile data was destroyed by this.
. It isn't the case anymore.
. Step 1. Click "Edit Direct.".
. Step 2. Select "@data".
. Step 3. Edit the width/height to the right. (The two numbers next to each other, below the tile number values.)
. Step 4. Click "Resize".
> 7 Back to the Map Tools.

11: Event Editing Details
. Before I note anything else, this depends on the game.
. However, all events have two fields in common: @x and @y.
. These fields are used to specify the position of the event in the map.
. No matter how the specific engine does things, the toolset relies on these fields being in place.
.
. The general structure of objects should always be kept in mind when editing.
> 12 Object Editing Details
.
. Game-specific documentation files:
> 18 RPG Maker 2000/2003 (R2K[3]) Events Overview
> 14 RGSS (RXP, RVXA) Events Overview
> 13 Ikachan Events
. Assuming there are schemas for all the commands (RVXA users take note), you should be able to use them by looking at the Ruby interpreter scripts as documentation.
> 9 Back to the Event List guide.

12: Object Editing Details
. The "Schema" system for editing objects is meant to be usable.
. However, it does not make things easy.
.
. Beforehand, a reminder.
. Text fields will revert unless you press enter.
. The same goes for number fields.
.
. Now that emphasis is over, here's the notes.
.
. Firstly:
. To the left is generally the field name, to the right is generally the field data.
. They are split by a line which should be visible between them.
. The field name is not usually editable.
.
. Secondly, the top (not the title) bar does many things.
. It shows the object you're currently using.
. You can use "Insp." for raw inspection.
. This is usually useless on backends other than 'r48' (RGSS).
. ".." lets you go back a level, and "Save" does what you'd expect.
. The "Cp." and "Ps." buttons allow copying and pasting a part, so long as it's relatively valid, from one place to another.
. The system will try to correct any obviously wrong details.
. The copy and paste applies to the object being viewed, not the currently selected field or any details.
.
. Thirdly, if an object ends with a bunch of one-letter buttons, this means it can be one of several types, and clicking those buttons resets it with a type.
.
. I hope this is enough information to work with.
.
> 11 Event Editing Details
> 4 System Objects

13: Ikachan Events
. There is only one thing to note about Ikachan events:
. Ikachan events are best learned by experimentation, as the meanings of, say, the target offset parameters, aren't consistent between NPC types.
> 11 Event Editing Details

14: RGSS Events (Overview)
. RGSS, or the 'Ruby Game Scripting System', is. in essence a generic 2D game engine that uses Ruby.
. Nothing much about it - it leaves a lot up to the Ruby scripts, short of some tilemap rendering details and such.
. In practice, RPG Maker itself follows specific patterns, and for users, these patterns are law.
.
. Firstly, @name is a 'useless' field (relied upon by some custom Ruby scripts as an indicator).
. @id is just a reference to the parent ID and cannot be used.
. @x and @y are the position.
. @pages is the array of pages - each page is a possible state for the event to be in.
.
. A page has, among other things:
.
. A @condition, which specifies when this page should be shown.
. If more than one page is valid, the last page wins.
. This is made up of 'valid' flags, followed by their parameters - the parameters are ignored if the valid flag is false.
. The final condition is the logical AND of all valid parts.
.
. A @move_route, which specifies the sequence of movements the event performs in this page.
> 15 RGSS Events (Moveroutes)
. A @move_type, @move_frequency and @move_speed, which specify how the event moves.
. A @through flag, which specifies if the event can be walked through.
. @step_anime and @walk_anime flags, which enable/disable step/walk animations.
.
> 17 A @graphic to show the event in-world.
. A @priority_type, which controls how the event shows up when other events overlap it.
. A @direction_fix flag - if true, the event will NOT face towards the player on interaction.
.
. A @trigger, dictating what causes the code in the @list to execute.
> 16 A @list of commands.
.
> 11 Index Page Of Event Editing Details

15: RGSS Events (Moveroutes)
. Like EventCommands, except without indentation, and can't do as much.
. They can flip switches, rotate towards or away from the player, move about, jump, turn randomly, and all sorts of other fun.
. But they are useless for computation.
.
. A technique I saw once was to continually rotate an actor to achieve an animation.
. For this, direction_fix should be true, step_anime and walk_anime should be false.
. As for the moveroute itself, it should be set to loop, consisting solely of a turn right and perhaps an insertion point.
.
> 14 Back to RGSS Events (Overview)

16: RGSS Events (EventCommands)
. EventCommands are the bread and butter of how you actually write any story into a RPG Maker game.
. They also change so much between versions that to describe them all in here would be ridiculously complicated.
. ...You'll just have to guess.
. For reference, look at your Interpreter Ruby scripts.
.
. To change the type, click on the command, then click on the command type at the top.
.
. A consistent thing to note is that "MoveRoute Editor Helper NOP" or such are absolutely ignored in-game.
. The 'Insert Point' is also ignored in-game.
.
> 14 Back to RGSS Events (Overview)

17: RGSS Events (Graphics)
. Graphics are used to display an Event in the world.
. Interestingly, RVXA has less features than RXP in this regard - it has no support for hue modulation.
. (Which is good, since R48 doesn't support viewing hue modulation anyway.)
.
. Graphics have a @pattern, indirectly indicating the X position within the spritesheet. (Starts at 0, goes up to 3 on RXP, 2 on RVXA.)
. They have a @tile_id, which should be 0 unless you want the graphic to be from the map tileset.
. They have a @direction, which indicates the direction of the event, and indirectly indicates the Y position in the spritesheet.
. Finally, graphics have a @character_name + hue or index.
. The @character_name specifies the image to get the character from, while the other two fields are version-specific.
. RXP has the hue, while RVXA has the index - the index allows putting many characters on the same spritesheet.
.
. In RXP, the spritesheet is always divided into 16 images, as a grid of 4 images by 4 images, evenly split across the sheet.
. The rules I note above about X and Y position apply on that grid, though the direction IDs are divided by 2 and then decremented first.
.
. In RVXA, the rules are a little complicated, and I don't understand them entirely, but part of it has to do with image names.
.
. Firstly, by default the spritesheet is considered a 12x8 grid of images.
. There are 3 patterns, IDs 0 to 2. There are the 4 directions. And there are 8 character indexes, from 0 to 7. 3 * 4 * 8 = 12 * 8.
.
. From this, follow these rules:
.
. If the image name does NOT begin with '!', then a 4-pixel offset is applied to push the image upwards.
.
. Disregarding a '!' if it's there, if the remainder of the image name begins with '$', completely different rules apply:
. Rather than a 12x8 grid, it is a 3x4 grid, and the character index should be 0.
. This allows avoiding wasted space.
.
. Finally, note that the prefixes are not removed before attempting to load the file.
. 
> 14 Back to RGSS Events (Overview)

18: RPG Maker 2000/2003 Events Overview
. RPG Maker 2000/2003 (hereon referred to as R2k) Events are different in some ways, and the same in others, to later RPG Maker events.
.
. The primary things to note:
.
. Events are split into pages.
. The last page with all matching conditions "wins".
.
. The @condition controls when the page applies.
. The @trigger controls when the code in the event page runs.
. The @list is the code of the event.
.
. The @move_type controls movement first and foremost, like in RGSS.
. The @move_route only applies if the @move_type is "custom".
. The @layer an event is on affects it's collision with the player.
. The @block_other_events flag indicates this blocks any other event from entering where this event is - and this event from entering any other.
.
> 19 The Graphics panel controls how an event looks.
.
> 11 Index Page Of Event Editing Details

19: R2k Event Graphics
. Event graphics are quite important in R2k, given the limited abilities of tile graphics there.
. Event graphics are still not entirely flexible, but they stay stuck on the map, which is useful.
.
. There are two kinds of event graphics. Tile event graphics and character event graphics.
.
. If the @character_name is blank, tile event graphics are used. The @character_index + 10000 is the tile ID displayed.
. This is why the 10000-10143 tile range is marked 'EV.TileIndexes+10000'.
. Getting a tile index from there and subtracting 10000 gives you a @character_index.
. Contrary to the name, event graphics can allow (for example) crossing bridges, at least on the belowPlayer layer.
. (The EasyRPG Test Game 2000 demonstrates this. It also has several rendering tests I found useful during R48 development.)
.
. If the @character_name is not blank, character event graphics are used.
.
p 4
I R2K/char.png 0 0 288 256
p 4
. Above is a simple example, though the characters are the same character copy & pasted - an artist I am not.
.
. Character event graphics use a spritesheet of 288x256, divided into 8 characters.
. (EasyRPG Player-only: If prefixed with a '$', the spritesheet can be any size.)
. This division, which the character index refers to, is 4 columns, 2 rows, of the form:
.
. 0123
. 4567
.
. (Hopefully the above text shows up correctly.)
. The characters are in turn divided into 3 columns, 4 rows.
. This makes for a total of 12 columns, 16 rows - each individual sprite being 24x32.
.
. In any case, each character has 3 patterns, 0, 1 and 2, each being a column.
. 1 is considered the "standing" pose of a character, and you should typically set the pattern to 1.
. Patterns 0 and 2 are the right and left (relative to the character, i.e. the 'up' sprites) leg of the character going forward, respectively.
. Note that these pattern values, given RPG Maker 2000/2003's design, are standard when using open-source replacement RTPs.
. (I do not believe using non-open-source non-replacement RTPs - that is, those owned by KADOKAWA, Enterbrain, Degica, or similar - with R48 is a good idea, nor do I endorse such activity.)
. Note that the pattern will continually "walk" if @anim_type is set to "always".
.
. Each character also has 4 directions, this being the row.
. The directions are up, right, down, left.
. Note that if the @anim_type does NOT say "noActDirchange", the character will temporarily change direction to face the player when 'talking'.
. This appears to mean "interaction triggered by the player on the event somehow."
. If the @anim_type is "spin", the direction will always change. All the time. In a continuous loop.
.
> 11 Index Page Of Event Editing Details
> 21 R2k Backend Quickstart

21: R2k Backend Quickstart
. RPG Maker 2000/2003 is, as you probably know, emulated by the (unrelated to me) open-source EasyRPG Player project.
. As RPG Maker 2000/2003 does not have any Core Scripts to deal with, it means that with a full editor, games can be created from scratch.
. Step 1. Create a blank folder.
. Step 2. In the folder, create the folders "ChipSet" and "System". (capitalization is important.)
. Step 3. Extract assets/R2K/templatetileset.png from this JAR (it's a ZIP file) and put it in ChipSet. Do not rename it.
. Step 4. Extract assets/R2K/System.png from this JAR (it's a ZIP file) and put it in System. Do not rename it.
. Step 5. Copy the program JAR into the folder and run it, or alternatively (if you understand how to use Root Path) simply point it there.
. Step 6. Once you select RPG Maker 2000/2003, there should be 3 modified files, and the screen showing up should contain a grid flashing between different colours.
. Step 7. Save all modified files, and begin work. You will need a knowledge of how RPG Maker 2000/2003 games are structured to continue, but it should work.
.
. General Structure:
. RPG_RT.ldb and RPG_RT.lmt: Data files used to run the game.
. RPG_RT.ini: Optional and not handled by R48. Starts with the line "[RPG_RT]", and ought to contain "GameTitle=your title here".
. Backdrop: Battle background images. 320x240. Non-transparent?
. Battle: Animation images. 480x480, 96x96 per cel.
. Battle2: RPG Maker 2003 larger animation images. 640x640, 128x128 per cel.
. BattleCharSet: Player party images. (This is probably 2003-only.) 144x384, 48x48 per image, one character per row.
. BattleWeapon: Weapons used for attack animations. (This is probably 2003-only.)
> 19 CharSet: Event, player and vehicle images. 288x256.
. ChipSet: Tilesets. The best way to understand this is probably to look at the template and experiment. 480x256.
. FaceSet: Faces. 192x192 total, 48x48 for each face.
. Frame: Don't use this, really. Just use a Picture. 320x240.
. GameOver: 320x240 images for Game Over.
. Monster: Enemy images. Can be any size.
. Music: Music, in various formats.
. Panorama: For the "parallax" fields. Non-transparent? (Accurate parallax emulation in an editor is impossible due to it being gameplay-dependant)
. Picture: Arbitrary images to be shown on screen using specific commands.
. Sound: Sound effects for various things.
> 22 System: Alters the general appearance of system frames and text. 160x80.
. System2: For things used in RPG Maker 2003. 80x96.
. Title: Title screen images. 320x240.

22: R2k Backend 'System' Explaination
. The "System" images are 160x80, and follow a complex layout.
. The bottom 32 pixels are 16x16 colour swabs for text rendering.
. The 4th is used for disabled items, the 5th is used to mean "critical", and the 6th means dead.
. The 10th, meanwhile, is used for healing actions.
. The next highest 16 pixels are broken unevenly into 16 pieces.
. Horizontally, these are:
. 16 pixels: Main Background Swab
. 16 pixels: Main Shadow Swab
. 8 pixels times 10: Digits 0 to 9
. 8 pixels: ':'
. 8 pixels: Unused (or maybe space)
. 16 pixels: Shadow Large
. 16 pixels: Shadow Small
. The remaining 32 vertical pixels are broken into 4.
. 32 pixels: Window Frame Swab (can be stretched or tiled depending on RPG::System settings)
. 32 pixels: Frame (outer 8 pixel border) and arrows (inner 16x16 pixels block split in 2, up arrow being upper)
. 32 pixels: Selection Frame, animation frame 1
. 32 pixels: Selection Frame, animation frame 2
. 32 pixels: This is further split into 4 8-pixel wide frames of 4 8-pixel high change indicators.
. From the top of the indicators, these are "positive", "same", "negative", and a "E" (Equipped?).
> 21 Back To Quickstart

23: R2k Savefiles Quickstart
. There are many RPG Maker 2000/2003 games out there. That's a fact at this point.
. And there are quite a few people, (maybe including you, as you're reading this!) who want to edit savefiles in these games.
. Unfortunately, a RPG Maker 2000/2003 savefile is rather complicated! But that won't be an issue.
. The Saves panel lets you load or create savefiles.
. Creating a savefile is experimental, but should bring you to the start of the game, allowing you to inject items you shouldn't have, adjust actors, etc. from the very start.
. Savefiles are shown in the Map panel.
. Most of this simply acts as a display, though - the details are in '...' -> 'Properties'.
. Let's start with the basic outline...
i HelpImg/3.2003save.png
. @title : Defines how this savefile appears in the Load menu.
. @system : Defines various RPG_RT.ldb@system details.
. @actors : Contains experience, skills, battle commands (if applicable) of actors.
. @party : Contains party members, the items list, gold, timers, and some generic stats.
. @party_pos (accessible as the "Party" event on-world): The current player position and details.
. @boat_pos (if party's on the same map, accessible as "Boat"): The boat's position & details.
. @ship_pos (if party's on the same map, accessible as "Ship"): The ship's position & details.
. @airship_pos (if party's on the same map, accessible as "Airship"): The airship's position & details.
. @target : Used by the Teleport event. Note that it seems a fake target is sometimes added by RPG_RT.
. @map_info : Contains details from the MapInfo entry regarding this map, tile remaps, events, and parallax info.
. @screen : Contains information on global screen effects. Some of this is uncertain (contact EasyRPG with your findings, they'll tell me).
. @pictures : Maps Picture IDs to their information.
. @main_interpreter : The Interpreter used for non-parallel event code.
. @common_events : The Interpreters of common events.
. Reset Events & Version : Using this will delete all events from the savefile and add in the map's events and set the save-counts.
. Using it and then removing a particular event *should* allow you to bypass event obstacles, though note that some events may stop working entirely simply by it's use.
. If you simply want to reliably teleport the player, use the next button:
. Try To Get RPG_RT To Reset The Map (not shown) : Tries to get RPG_RT to reset the map by setting this as an older save and getting rid of event info.
. This is incredibly useful if you intend to teleport yourself across maps and *don't* wish to disturb events at your destination.
. Note that all events will be converted to ghosts.
.
. Regarding what I mean by a "ghost" here, a "ghost" is what I'm calling events which will appear in the map that aren't in the save.
. R48 detects when ghosts are likely to occur and show them - and lets you put them in the savefile!
. But this is done in the same way as Reset Events, so... possibly unreliable.

800: Help Page On Help Page Allocations
. 0: The first page.
. 1-799: Documentation, not referred to by code.
. 800-899: These pages are for self-documentation.
. 900-999: These pages are explicitly allocated, and could be referred to from inside code.
.
> 801 The Help Format
> 802 Additional Information

801: The Help Format
. The help format is a simple markup format.
. It is meant for easy, fast layout.
. It uses the normal DB format, divided into sections with the usual numbered-object-creation syntax.
. For example, "801: The Help Format" begins page 801.
. Pages should, but do not have to be, ordered.
. The following 'commands' exist:
. '.': Write a line of text. Automatic word-break is always on, but line-break also occurs.
. 'p': Generate some amount (given as a number) of blank space.
.
. The following two commands draw images.
. They take either one parameter (the image filename) or five parameters (image filename, X, Y, width, height.)
. The five-parameter version is useful if a cropping of an image should be used.
.
. 'i': Draw a image to the right side of the page, with text continuing on the left (Mediawiki-style but with no 'undertext'.)
. 'I': Draw a centred image, useful if you want to draw attention to it / give it a margin.
.
> 800 back

802: Additional Information
. The version you have is >= 0.5.
. With that in regard.
. The solstice was missed, I wanted to release this then but chickened out.
. But hey, they needed more time too, so whatever - here I am, typing these words.
. I wonder what will happen if THEY find me out? Well. Let's just hope that doesn't happen.
.
> 800 back

998: Internal Tool Documentation 'RMAnimEditor'
. Sometimes, you just need to edit a battle animation.
. And you can't do that very easily from the standard interface, though it is possible.
. RMAnimEditor was written for making things easier, but it's kind of weird and doesn't render all cases.
.
. Notably, this only covers the @frames section.
. The rest, including timings, must be edited manually.
. Also keep in mind that the frame numbers displayed are 1-based - timings use a 0-based system, so subtract 1 to get the timing frame.
.
. So, without further ado, the layout:
.
. At the top is the Timeline Bar.
. It allows going between frames ('<', '>', 'Play').
. It allows copying and pasting them ('C', 'P') - pasting overwrites the current frame, it doesn't insert.
. And it allows inserting a copy of the current frame as the next frame ('+'), and removing the current frame ('-').
.
. In the lower-left is the actual Animation View.
. A darkened cross on the background is the "zero point" - coordinates 0, 0 relative to the animation's point on-screen.
. Right-button-drags across the Animation View will shift it's camera.
. Left-button-drags will change the X/Y position of the currently selected cell.
.
. In the lower right is the Cell View.
. This has two of it's own panels - at the top, it has the properties for the selected cell (or nothing if no cell is selected) - at the bottom, it has the cell list.
.
. This serves as a hopefully functional toolset for modifying animations.

999: License
.
. You are using the following version of R48:
p 4
I layertab.png 37 48 31 16
p 4
.
. gabien-app-r48 - Editing program for various formats
. Written starting in 2016 by contributors (see CREDITS.txt)
. To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
. You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
.
> 0 Back to the Index.
