
 * This is released into the public domain.
 * No warranty is provided, implied or otherwise.

 THE GLOBAL SCHEMA FILE (this text moved from RXP schema)
 commands:
  ']' Use only if this object is an array - indexes the array.
      Use in any context that happens to also be an array, lastArray isn't a thing anymore.
      This will ensure the target is an array if it isn't already.
  ':' Define object class.
  '.' Define substructure.
  '@' Instance var.
  '+' Append directly to aggregate. (Needed for some less often-used things that need to be attached, see table*)
  '>' Alias.
  'e' Enum. First argument is type ID, then alternating integer and text-word.
   e blah 1 Box 2 Circle 3 Rectangle
  's' Symbolic Enum. (enum using Ruby Symbols). First argument is type ID, rest of the arguments are symbols.
   s blah :box :circle :rectangle
  'E' Enum with text on the int-entry button. First argument is type ID, second is button text-word, then the alternating integer and text-word.
   E level LevelID 0 Zombies 1 Piranhas 2 FourHorsemenOfThePocalips
  'M' Merges two enums at the end of each frame (after dictionaries).
      This is useful for cases where you have a dictionary, and then some special values.
      (character_id)
  ']' Array index (shorthand for "+]<index>", basically)
      Use only in a proper array context (it will check!!!)
  'i' include file
  'D', 'd': Dictionary definitions (moved from hardcoding to make inter-engine porting potentially easier.)
   'D' refers to a dictionary where elements contain names.
   'd' refers to a dictionary where elements directly equal names.
    Examples are probably the simplest thing at this point...

    Firstly, Tilesets here is an ObjectDB array. Nothing around it, just a raw array referred to by a file,
     containing objects with the instance variable "@name".

     D internal_tilesetDictionary Tilesets 0 @name

    Note that "Tilesets" could be extended with instance variables, like this R2K example referring to "@map_infos", a hash (hence 1) in RPG_RT.lmt:

     D internal_mapDictionary RPG_RT.lmt@map_infos 1 @name

    Applied to the existing example, that would be:

     D internal_tilesetDictionary Tilesets@some_array 0 @name

    And now for 'd'-syntax, which is different and always refers to arrays.

     d internal_elementDictionary System @elements

     This refers to the instance variable @elements of System, as an array of strings.

  'A' Install AutoTiles files.
   The autotiles system works with a set of autotiles definitions, which must be installed.
  'C' Random stuff (allowIndentControl, name definitions..., access to the super special schema that only works for a given structure...)
   The translation-relevant parts (unless a different system is suggested, this is *the* translation interface):
   C lang allows writing language-specific definitions.
    Example:
     C lang English
     e you_are_cat 0 notACat 1 amACat
     C lang Lojban
     e you_are_cat 0 do_mlatu 1 do_nai_mlatu
     C lang
      (language-neutral code follows...)
    Note that this should be avoided when possible for maintainability.
    A possible future command would be like the following command, but refering to X many items back (to allow subwindow renaming & IVar at the same time)
   C langRew allows replacing the text of the last (or n-th last) named object.
    Named objects are:
    Subwindows with explicit text: subwindow[ ABC ]
     but NOT subwindows referring to C name entries (these have @ at the start of their inner text)
     (the inner object is processed first)
    Tables (the shown text for opening the table dialog)
    Instance variables ('@'-commands and optIVar. Note that the inner object is processed first.)
    Array indexers (including ']'): ]1 blah int
                                    ]?1 optBlah int
    Again, inner object processed first.

    This does not affect internal information (the Inspector will always show the instance variables as-given),
     it just affects display.
    Example:
     C name ourWorkIsNeverOver | Our work is never over.
     C langRew 0 Backwards .revo reven si krow ruO
     @someVar int
     C langRew 0 Backwards raVemos
    Better example:
     @otherVar int
     @someVar subwindow[ Item ] RPG::Item
     The subwindow is processed first, then the encapsulating iVar.
     C langRew Backwards 0 raVemos
     C langRew Backwards 1 metI
     C langRew Backwards 2 raVrehto
  <The actual chaining language is... complicated - see SDB.java for details.>