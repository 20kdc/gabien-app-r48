
 * This is released into the public domain.
 * No warranty is provided, implied or otherwise.

 -- bits and bobs

e control_switches_type 0 Single 1 Range 2 Indirect
e control_switches_change_mode 0 On 1 Off 2 Toggle

e message_options_position 0 Top 1 Centre 2 Bottom

e get_actors_mode 0 WholeParty(ign.target) 1 Actor 2 Var.Actor
e change_battle_parameter 0 MaxHP 1 MaxMP 2 ATK 3 DEF 4 SPI 5 AGI

 ---

i R2K/SchemaScriptingMonolith.txt

 ---

 Defining EventCommandEditor triggers RMTools, DO NOT DO THAT!
 Now for an explaination.
 LcfEventCommandEditor is a full schema element which acts as RPG::EventCommand.
 LcfEventCommandEditor_Most is what the user will see if no command is defined.
 RPG::EventCommand is the *conveniently completely invisible* schema being used for modifyVal.
 Which means it can do whatever it likes, including, say, slight misuse of a 1-based indexer.
 arrayIx1 DOES NOT CARE about element 0, outside of making it nil if it would otherwise be a VM-incompatible value (Actual Java NULL).
 Next, ]0 text string will reinitialize it and make sure the first is a string.
 arrayIx1 will ensure the rest are all ints.
 Thus, it should be impossible to generate unserializable data.
 ...Meanwhile, LcfEventCommandEditor_Most gets it the other way around, since it's for user display, so text should be at the top.
 (Or something. Hang on. Fixing stuff R/N. This added later. I've unified the display/nondisplay LcfEventCommandParams.
  Advice: HAVE A DEBUGGER HANDY IF YOU ARE WRITING SCHEMA STUFF AND GET A ARRAYELEMENTSCHEMAELEMENT ERROR!!!!)

> genericScriptParameter int

 -Event Commands-

 Technically the arrayDAM isn't needed,
  but it's SUPPOSED to be there to ensure array parent stuff is all in order.
 (Ok, fixed, now it's needed. Allowing inconsistency causes inconsistency causes bugs.)
 (Ok, so it turns out inconsistency wasn't really a factor, and it was just a stupid mess going back to RPGCommandSchemaElement's original implementation.
  Long story short, arrayDAM isn't needed, and if you feel like lastArray should be brought back, try moving the logic into the array class.
  Suddenly, you'll question why on earth you decided lastArray might be a good idea, and think about all the complexity it brought LAST TIME.
  This being a message to myself, in case I ever decide to bring it back.)

.LcfEventCommandParams
]0 text string
+arrayIx1 genericScriptParameter

: RPG::EventCommand
@code int= 12310
@indent int
@parameters LcfEventCommandParams
+optIV @move_commands array 0 LcfMoveCommandEditor

.LcfEventCommandEditor_Most
@indent indent
@parameters LcfEventCommandParams
+optIV @move_commands array 0 LcfMoveCommandEditor

> EventListEditor subwindow arrayCS R2K/Commands.txt LcfEventCommandEditor
> LcfEventCommandEditor RPGCS R2K/Commands.txt RPG::EventCommand LcfEventCommandEditor_Most

 Use the Command Buffer syntax to fix this mess.
 Note that this introduces new and interesting problems, but I claim it's worth it,
  as movecommand_code is used elsewhere(!)

 -Move Commands-

 Used by the move commands to avoid tons of redundant paramspecs

.movecommand_default_nothing
@parameters { ]0 _ string ]1 _ int ]2 _ int ]3 _ int }

: RPG::MoveCommand
@code int
@parameters { ]0 _ string ]1 _ int ]2 _ int ]3 _ int }

> LcfMoveCommandEditor RPGMS R2K/CommandsMove.txt RPG::MoveCommand movecommand_default_nothing
> MoveListEditor subwindow array 0 RPG::MoveCommand
