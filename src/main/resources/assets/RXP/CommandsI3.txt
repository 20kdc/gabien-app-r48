
 * This is released into the public domain.
 * No warranty is provided, implied or otherwise.

 [Interpreter Part 3]

101: Say$
d Begins showing a message.
p text string

401: Say(Cont.)$
d Continues a message.
p text string

102:@@Show Choices: {A:[choice_array]A {B=1=(can cancel)}|(c.402/403/404)}
d Shows a set of choices to the player. A block, made up of this, 402, 403, and 404.
p choices string_array
p cancellable int_boolean
I1

 NOTE: I'm leaving this documentation here,
        for lack of a better place.
       The structure of a Show Choices, from indent 0, is:
       i0 Show Choices
       i0 When Choice = 0
       i1 <code...>
       i1 Leave Block
       i0 When Choice = 1
       i1 <code...>
       i1 Leave Block
       i0 End Choice
 (Later)
 Er, right, to myself who might have thought up a solution to the conundrum,
  it got resolved with the introduction of the 'K' command, which acts as 'l' but adds an exception.

402: When Choice =$
d Within a choice block, contains the code for a specific choice.
p choice int
 We don't actually care about this
p _ string
i-1
I1
K102

403: When cancelled (idx 4)
d Within a choice block, contains the code for if the cancel button is pressed.
i-1
I1
K102

404: End Choice
d Ends a choice block.
i-1
K102

103: Input Number!
d Asks the player to input a number, and store the result in a variable.
p varId var_id
p digitCount int

104:@@Change Text Options{A::#A, {B=1=in}visible bkg.}
d Changes the settings used to display text.
p position change_text_options_position
p frameTransparent int_boolean

105: Button Input!
d Stores a pressed button in a variable.
p varId var_id

106: Wait$
d Waits some amount of time.
p time int

111:@@Conditional{A::[@conditional_branch_parameters]| Branch (c.411/412)}
d A conditional branch. Made up of this, optionally a 411 'Else', and a 412 'End Conditional'. Skips some code if a given condition is false.
 The parameter exists so the A: detect works
p type conditional_branch_types
X conditional_branch_parameters
I1

411: Else
d Begins the code run if and only if the condition is false.
i-1
I1
l

412: End Conditional
d Ends a conditional branch block.
i-1
l

112: Start Loop (c.113/413)
d Begins a loop, see 113 and 413.
 this is a blank 'placeholder' command
I1

113: Break Loop
d Leaves a loop. Presumably use in a conditional.
 This command breaks to the next Repeat Above it finds with a lesser indent,
  this proves the indent of Repeat Above is i-1 I0, OR it has a leave block before it.
 The answer in actual fact (I wrote the "find EventCommand by code" button to find this)
  is that End Loop is indeed preceded by a Leave Block.

413: End Loop/Repeat Above
d Goes back to the start of a loop.
i-1
l

 There quite literally is no command here.
 It could be an indentation NOP, but a scan of the only reference code I have
  suggests it simply does not exist.

115: Exit Event Processing
d Stops running the code in this page.

116: Temp. Erase Self Event
d Erases the running event until next map load.

 This isn't very well-explained, so:
  A common event is a subroutine loaded from a file called "CommonEvents.rxdata".
117: Call Common Event$
d A common event is a code list loaded from the CommonEvents file. Start one. (Execution will return here when done.)
p eventId commonevent_id

118: Label$
d A label. Can be jumped to.
p labelName string

119: Unreliable Jump!
d Jump to a label. May act odd under certain indentation situations.
p labelName string
