
 * gabien-app-r48 - Editing program for various formats
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * You should have received a copy of the CC0 Public Domain Dedication along with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

 -- MOVED FROM THE RXP CMDB, cleaned up --

 Original Format (no prefix)

  A very simple format for cases when you can get away with it.

  Note that '$' is replaced with " <nice looking string>",
   while '!' is replaced with " to <nice looking string>".
   '#' defines a range, for "A through B" commands.
  Both are replaced with nothing if just entering the command name.

  an example: 108: Comment$
  a more advanced example: 103: Input Number!$ digits
   (As this format is crude, this shows as "Input Number digits" in the selection box.)

 Semi-original Format (prefix '@P')

 '@P' is the Original Format -
  but enumeration prefixes are not applied, like with the Extended Format.

 Extended Format (prefix '@@')

  A format which has grown to be used in quite a lot of things (SDB can use it, for example)

  Parameters are referred to by A through Z for simplicity of implementation.
  Most characters are interpreted as-is.

  #A outputs Parameter A.
  However, if Parameter A does not exist, then it will literally output 'A'.
  This behavior is also fully usable as an escaping mechanism. That is, '##' will output '#' reliably.
  In either case, the prefixNext flag is disabled afterwards (see '@')

  @ causes the next outputted value to be prefixed if it's an enumeration.
  This is more-or-less always used as the "command" "@#A" or "@#B" or such, for "output prefixed enumeration".

  {|} are used to open/'else-branch'/close blocks.
  Blocks are used for conditional text writing.

  [] is used to perform a specific parameter interpretation,
   as opposed to # (only capable of interpreting using the default interpretation).

   --- INTERPRETATIONS ---

  The schema database may contain name-routine definitions,
   usually used for handling classes like AudioFile.
  These name routines define *sources* relative to the parameter.
  If the context has a bad default interpretation, you will probably want to force a given interpretation.
  Or if you've broken up your name-routine into pieces, you may want to call the sub-components.

  The rules of interpretations are:
   By default, the type name is looked up in the "Interp." prefixed name set.
   Failing this, if it's an object, the "Class." prefixed name set is checked.
   Failing this, the schema is looked up, in case it is an enum.

  If the character '@' prefixes the interpretation type, the type name is considered to be the full name routine's ID,
   and all the parameters are given to the new name routine (no parameter is postfixed)
  If a parameter is supposed to be postfixed, and that parameter is '[', then the parameter is the formatted text within there (treated as RubyIO string)
   (For example, [add-one-to-integer][[add-one-to-integer][0]] would be a theoretical way to get 2.)
  Note, however, that in order for this to work properly the text goes through the system encoding in the interim.
  Thus, DO NOT use this syntax to handle translation text!!!

  If no interpretation exists for the type given, it fails completely,
   and will result in a no-variables-interpretation (An error in a case where no variables are allowed causes an exception.)

  An example usage:
   [int]C

  An example call treating the *current structure* as a Class.RPG::AudioFile:
   [@Class.RPG::AudioFile]

  Another example call, equally valid, but treating parameter A as the audio file, and running through the typical interpretation mechanism:
   [RPG::AudioFile]A

   --- CONDITIONAL BLOCKS ---

  Almost all blocks use '{' to start, '|' will invert the condition mid-way, and '}' terminates.
  (A special type uses '|' as a separator.)

  There are four formats for blocks.
  If a parameter mentioned is unavailable, the false branch is taken.
  Blocks are never entirely skipped unless they have no false-branch.

  The first checks if a parameter is *available* - that it exists.
   {A:Previous attempts to listen to this tape will have found it blank.}
   {A:(with parameter)|(without parameter)}

  The second checks if a parameter is the same as another.
  This can be used for range specification (emulating # in the Original Format, but with flexibility):
   {AB:#A|@#A..@#B}

  The third checks if a parameter, *by the fallback in-built RubyIO toString*, is equal to a literal text string.
  This should only be used for numbers/enums and booleans, really.
  This can be used as a nicer way to output int_booleans...
  {A=1=(enable)|(disable)}
  ... or as a way to handle "invert" options. (Note the inverted order of the text.)
  {A=1=OFF|ON}

  The fourth is an enumeration. It is indicated by having '@' instead of the first variable.
  This enumeration is based on text, allowing it to be flexible (using interpretations for transform),
   and also allowing it to be simple.
  {@#A|:concurrent|Concurrent|:waitOn|Wait On...|Unknown #A}
  The format here is:
  {@<key>|<key1>|<value1>|<key2>|<value2>|<default>},
   but can be expanded to any amount of key/value pairs:
  {@<key>|<key1>|<value1>|<key2>|<value2>|<key3>|<value3>|<default>}
   and the default omitted:
  {@<key>|<key1>|<value1>|<key2>|<value2>|<key3>|<value3>}
  In this case, if parameter A interprets to ":concurrent", it will show "Concurrent", if it interprets to ":waitOn", it will show "Wait On...",
   and if neither is the case, it will show "Unknown #A" (this is further interpreted).

  Note that in this case, *all divisions are run through the interpreter*.
  This allows keys to be based on context, should it be necessary.

 Here are some examples of the Extended Format in use.
 These examples show all block types in use for their purposes.

  an example: 108:@@Comment{A: #A}
  a more advanced example: 103:@@Input Number {A: to @#A}{B: of #B digits}
  another example: 122:@@Set Variables{A: {AB:@#A|@#A..@#B} #C {D=int=int: [int]E|{D=var=var: @[var_id]E|#D}}}

 ----------------------------------

  Name Database Built-in Routines
  These all follow the scheme "lang-<language>-<methodCamelCase>".
  Common is used for routines which aren't targetted at a specific language.

  lang-Russian-pluralRange:
   Example:
    {@[lang-Russian-pluralRange][#A #B]|0|plural-form-0|1|plural-form-1|2|plural-form-2}
   Splits the input string by spaces, then converts to numbers, and takes the difference,
    then gives the value 0, 1 or 2 dependent on plural form.

  lang-Common-arrayLen:
   Example:
    {@[lang-Common-arrayLen]A|0|No commands|1|One command|[lang-Common-arrayLen]A commands}
   Used to extract an array length from an array. (Which would otherwise show as "[<length>]".)
   Note that one-indexed arrays are considered zero-indexed internally, this means their length is one higher than it 'should be'.

  lang-Common-add:
   Example:
    [lang-Common-add][5 5]
   Splits to words, converts words to integers, then adds them together to get a result.
   Useful for, say, r2k LSD save interpreter stack depth adjustment.

  lang-Common-r2kTsConverter:
   Example:
    [lang-Common-r2kTsConverter]A
   Converts a TDateTime (float) to a human-readable date format.

  lang-Common-valueSyntax:
   Example:
    [lang-Common-valueSyntax]A
   Converts an object to ValueSyntax form for totally consistent output.
   Useful at the start of {@ blocks.
 ----------------------------------

 Note: It is probably possible to confuse the NDB interpreter if you know what you are doing (or don't).
 Rather than generate an AST or such, it parses on-the-fly (for relative simplicity), and does so without some sanity checks.
 At least in theory, the fact that # is the only escape character and {}[] have to be matched otherwise should keep things in line.
 But, it might be possible to confuse it under some circumstance I didn't think of.

 ----------------------------------

 CMDB's general syntax:

 Subcomms:
  '<number>:<name>' defines a command and it's name-routine.
  'p' defines a parameter. The parameter can only be a type name, chaining language is restricted to SDB.
  'd' defines the description of the command. You will be warned for omitting this.
  'T' doesn't exist anymore, why was this still doc'd
  'P''s format is "disambiguationIndex defaultName defaultType".
  'v' defines a disambiguation "disValue name type".
   P 1 _ int
   v 1 actor actor_id
   v 2 actorVar var_id
  'L' defines this as a block and list leave command.
      Commands with this are only valid in two places:
      1. Immediately before an 'l'-type command
      2. At the end of the list.
      However, this can't be deleted due to Map29, E315 (ram nomming moss)

      Note that usually nothing goes after this, but in specific cases that rule is incorrect.
      If 'block' follows this, then this is solely defined as a block leave command.
      (This is due to RM2000/2003 oddities that make it different from the later iterations the R48 system was developed for.)

  'l' defines this as requiring a block leave before it, for correct indentation.
      This can be safely enforced without 100% knowledge of the command set.
      The parameter should be the thing that starts the block.
  'K' is similar to 'l', but defines an additional code which makes it "not count".
  'i' defines entry indent offset
  'I' defines exit indent offset
      (ex. Else is l,i-1,I1.)
  'X' defines this as using a custom schema for indent & parameters.
  'x' defines the same, but indicates to any external processing tools (Ghabry, take note:) that this is optional.
  'C' is, like with SDB, the gateway for special cases.
  '#' includes another file.
  '>' allows CMDB to create aliases. I'm not sure R48 even still uses this -
   it was meant for scaffolding when the type I *wanted* to use wasn't implemented yet,
   back when that happened approximately every two seconds.
  I'm now documenting all C-values, though they're made up as I go along:
   C digitCount <number>
    Controls the global amount of digits used for command numbers.
   C categories <...>
     Set the categories. The default category for a command is the last. Each name is unescaped and translated.
     The categories are referred to by their indexes.
   C category <index>
     Set the category of this command.
   NOTE: Only one post-indent control can apply at a time, including I.
    C commandIndentConditionalIB <paramId>
     Uses a parameter as an int_boolean flag to control post-indentation (true == 1, false == 0)
    C commandIndentConditionalOF (<paramId> <value>)...
     Essentially sets a bunch of conditions, and if at least one is true, post-indents by 1, otherwise doesn't.
     The conditions check if parameters are equal to values. (See: ValueSyntax in SDB1.1 mode)
   C spritesheet <strParamId> <spritesheet>
    Attaches a graphical index picker button to the bottom of the *next defined parameter*,
     which must be an integer.
    This uses the generic spritesheet API, with <spritesheet> being the directory name as usual.
    The <strParamId> is the parameter ID of the string for the particular image.
   C r2kTonePicker <index1> <index2> <index3> <index4>
    Attaches a graphical tone calibration (not actually a picker) view to the bottom of the next defined parameter.
    All 4 parameters are indexes, in the order: red, green, blue, saturation.
    This is for RPG Maker 2000/2003 tones - values may differ from other engines.
   C groupBehavior <type> <...>
    This defines how this command acts in relation to others.
    This is solely a user aiding measure, mind, and theoretically optional.
    Behaviors are:
     messagebox <command ID>
      This will cause any commands with the given ID put after the message box to be merged with it in the editor.
      It also provides a button to add a new command with that ID to the end.
      As this is a proper group, it will take up less space in the list, and is copy/pasted as one.
     r2k_choice
      This is particular behavior for r2k choices, which in general automatically adjust their indexes.
      Honestly this system is still a bit clunky, but it doesn't auto"correct" anything existing incorrectly.

     NOT QUITE SUPPORTED YET:

     form <ID/name pairs> <end ID>
      Used to improve UI for things such as:
      A:
      B:
       @>
      B:
       @>
      C:
     expectHead <valid IDs that are expected above this>
      Very important if using template.

   C template <IDs...>
    Sets up a template to follow this command with when inserted.