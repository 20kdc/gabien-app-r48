
 * gabien-app-r48 - Editing program for various formats
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.

 EVERYTHING DESCRIBED HERE WAS REMOVED FROM THE CODEBASE 26th JUNE 2023.
 Consider this a historical note.

 -- MOVED FROM THE RXP CMDB, cleaned up --

 Extended Format (prefix '@@')

  A format which has grown to be used in quite a lot of things (SDB can use it, for example)

  Parameters are referred to by A through Z for simplicity of implementation.
  Most characters are interpreted as-is.

  #A outputs Parameter A.
  However, if Parameter A does not exist, then it will literally output 'A'.
  This behavior is also fully usable as an escaping mechanism. That is, '##' will output '#' reliably.
  In either case, the prefixNext flag is disabled afterwards (see '@')

  @ causes the next outputted value to be prefixed if it's an enumeration.
  This is more-or-less always used as the "command" "@[some_enum]B" or such, for "output prefixed enumeration".

  {|} are used to open/'else-branch'/close blocks.
  Blocks are used for conditional text writing.

  [] is used to perform a specific parameter interpretation,
   as opposed to # (only capable of interpreting using the default interpretation).

   --- INTERPRETATIONS ---

  The schema database may contain name-routine definitions,
   usually used for handling classes like AudioFile.
  These name routines define *sources* relative to the parameter.
  If the context has a bad default interpretation, you will probably want to force a given interpretation.
  Or if you've broken up your name-routine into pieces, you may want to call the sub-components.

  The rules of interpretations are:
   The type name is looked up as a name routine.
   Failing this, if it's an object, the "Class." prefixed name set is checked.
   Failing this, the schema is looked up, in case it is an enum.

  If the character '@' prefixes the interpretation type,
   all the parameters are given to the new name routine (no parameter is postfixed)

  If no interpretation exists for the type given, it fails completely,
   and will result in a no-variables-interpretation (An error in a case where no variables are allowed causes an exception.)

  An example usage:
   [int]C

  An example call treating the *current structure* as a Class.RPG::AudioFile:
   [@Class.RPG::AudioFile]

  NOTE: The lookup for [@] syntax now occurs at compile-time, see notes below for commands.

  Another example call, equally valid, but treating parameter A as the audio file, and running through the typical interpretation mechanism:
   [RPG::AudioFile]A

   --- CONDITIONAL BLOCKS ---

  Almost all blocks use '{' to start, '|' will invert the condition mid-way, and '}' terminates.

  There are two formats for blocks.
  If a parameter mentioned is unavailable, the false branch is taken.
  Blocks are never entirely skipped unless they have no false-branch.

  The first checks if a parameter is *available* - that it exists.
   {A:Previous attempts to listen to this tape will have found it blank.}
   {A:(with parameter)|(without parameter)}

  The second checks if a parameter, as run through RORIO.toString, is equal to a text string.
  This should only be used for numbers/enums and booleans, really.
  This can be used as a nicer way to output int_booleans...
  {A=1=(enable)|(disable)}
  ... or as a way to handle "invert" options. (Note the inverted order of the text.)
  {A=1=OFF|ON}

 Here are some examples of the Extended Format in use.
 These examples show all block types in use for their purposes.

  an example: 108:@@Comment{A: #A}
  a more advanced example: 103:@@Input Number {A: to @#A}{B: of #B digits}
  another example: 122:@@Set Variables{A: {AB:@#A|@#A..@#B} #C {D=int=int: [int]E|{D=var=var: @[var_id]E|#D}}}

 ----------------------------------

 Note: It is probably possible to confuse the NDB interpreter if you know what you are doing (or don't).
 Rather than generate an AST or such, it parses on-the-fly (for relative simplicity), and does so without some sanity checks.
 At least in theory, the fact that # is the only escape character and {}[] have to be matched otherwise should keep things in line.
 But, it might be possible to confuse it under some circumstance I didn't think of.

