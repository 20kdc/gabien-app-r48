
 * gabien-app-r48 - Editing program for various formats
 * Written starting in 2016 by contributors (see CREDITS.txt)
 * To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.
 * A copy of the Unlicense should have been supplied as COPYING.txt in this repository. Alternatively, you can find it at <https://unlicense.org/>.

 ----------------------------------

 CMDB's general syntax:

 Subcomms:
  '<number>:<name>' defines a command and it's name-routine.
  - The name routine is compiled during the `ensureAllExpectationsMet` phase (core has loaded, but translations haven't).
  'p' defines a parameter. The parameter can only be a type name, chaining language is restricted to SDB.
  'd' defines the description of the command. You will be warned for omitting this.
  'T' doesn't exist anymore, why was this still doc'd
  'P''s format is "disambiguationIndex defaultName defaultType".
  'v' defines a disambiguation "disValue name type".
   P 1 _ int
   v 1 actor actor_id
   v 2 actorVar var_id
  'L' defines this as a block and list leave command.
      Commands with this are only valid in two places:
      1. Immediately before an 'l'-type command
      2. At the end of the list.
      However, this can't be deleted due to Map29, E315 (ram nomming moss)
      ADDITIONAL NOTE: See "strict" which restores the deletion behavior

      Note that usually nothing goes after this, which sets it as the block and list leave template, and as a block/list leave command,
       but in specific cases that rule is incorrect.
      If 'block' follows this, then this is defined as a block leave template and block leave command.
      If 'list' follows this, then this is defined as a list leave template and list leave command.
      If 'strict' follows this, then this can only exist to fulfill a block/list leave requirement.
      (NOTE: Only one of these args is usable on one line for now, just use multiple lines)
      The reason for this segmentation is due to RM2000/2003 oddities that make it different from the later iterations the R48 system was developed for.

  'l' defines this as requiring a block leave before it, for correct indentation.
      This can be safely enforced without 100% knowledge of the command set.
      The parameter should be the thing that starts the block.
  'K' is similar to 'l', but defines an additional code which makes it "not count".
  'i' defines entry indent offset
  'I' defines exit indent offset
      (ex. Else is l,i-1,I1.)
  'X' defines this as using a custom schema for indent & parameters.
  'x' defines the same, but indicates to any external processing tools (Ghabry, take note:) that this is optional.
  'C' is, like with SDB, the gateway for special cases.
  '#' includes another file.
  '>' allows CMDB to create aliases. I'm not sure R48 even still uses this -
   it was meant for scaffolding when the type I *wanted* to use wasn't implemented yet,
   back when that happened approximately every two seconds.
  I'm now documenting all C-values, though they're made up as I go along:
   C digitCount <number>
    Controls the global amount of digits used for command numbers.
   C categories <...>
     Set the categories. The default category for a command is the last. Each name is unescaped and translated.
     The categories are referred to by their indexes.
   C category <index>
     Set the category of this command. -1 means 'hide'
   NOTE: Only one post-indent control can apply at a time, including I.
    C commandIndentConditionalIB <paramId>
     Uses a parameter as an int_boolean flag to control post-indentation (true == 1, false == 0)
    C commandIndentConditionalOF (<paramId> <value>)...
     Essentially sets a bunch of conditions, and if at least one is true, post-indents by 1, otherwise doesn't.
     The conditions check if parameters are equal to values. (See: ValueSyntax in SDB1.1 mode)
   C spritesheet <strParamId> <spritesheet>
    Attaches a graphical index picker button to the bottom of the *next defined parameter*,
     which must be an integer.
    This uses the generic spritesheet API, with <spritesheet> being the directory name as usual.
    The <strParamId> is the parameter ID of the string for the particular image.
   C r2kTonePicker <index1> <index2> <index3> <index4>
    Attaches a graphical tone calibration (not actually a picker) view to the bottom of the next defined parameter.
    All 4 parameters are indexes, in the order: red, green, blue, saturation.
    This is for RPG Maker 2000/2003 tones - values may differ from other engines.
   C xpMoveCommandSetGraphic
    XP move command set graphic display to the bottom of the next defined parameter
   C groupBehavior <type> <...>
    This defines how this command acts in relation to others.
    This is solely a user aiding measure, mind, and theoretically optional.
    Behaviors are:
     messagebox <command ID>
      This will cause any commands with the given ID put after the message box to be merged with it in the editor.
      It also provides a button to add a new command with that ID to the end.
      As this is a proper group, it will take up less space in the list, and is copy/pasted as one.
     r2k_choice
      This is particular behavior for r2k choices, which in general automatically adjust their indexes.
      Honestly this system is still a bit clunky, but it doesn't auto"correct" anything existing incorrectly.
     form <ID/name pairs> <end ID>
      Used to improve UI for things such as:
      A:
      B:
       @>
      B:
       @>
      C:
     expectHead <valid IDs that are expected above this>
      Very important if using template.

     condition <command-relative-path, possibly prefixed with '!'> <ValueSyntax> <group behavior details>
     Allows controlling a groupBehavior based on a condition.
     The groupBehavior defaults to being off.
     Thanks to indent, this usually works out

     UPCOMING:
      expectTail <valid IDs that are expected below this>
      Expects the command below at the same indent level to be...
      Used for BRBs (they have a strict layout)

   C template <IDs...>
    Sets up a template to follow this command with when inserted.

   C translatable
    Marks this command as translatable.

